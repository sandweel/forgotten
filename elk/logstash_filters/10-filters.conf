filter {

#  multiline {
#    pattern => "\[?%{TIMESTAMP_ISO8601:timestamp}\]?"
#    pattern => "(\[?%{TIMESTAMP_ISO8601:timestamp}\]?|%{IP})"
#    what => "previous"
#    negate => true
#  }

# Types of log | grok pattern matches
  if [type] == "magento_report" {
    grok {
      match => { "message" => [ "%{GREEDYDATA}" ] }
    }
    json {
      source => "message"
      target => "log_json"
    }
  }

### Magento logs start
  else if [type] == "sendmailqueue.log" {
    grok {
      break_on_match => true
      match => { "message" => [ "(?m)^%{TIMESTAMP_ISO8601:log_date}%{SPACE}?%{DATA:log_level}\:%{SPACE}?%{DATA:log_message}[Tt]race\:%{GREEDYDATA:log_stacktrace}" ] }
      match => { "message" => [ "(?m)^%{TIMESTAMP_ISO8601:log_date}%{SPACE}?%{DATA:log_level}\:%{SPACE}%{GREEDYDATA:log_message}" ] }

    }
  }

# Stack trace broken
  else if [type] == "system.log" {
    grok {
      break_on_match => true
#      match => { "message" => [ "(?m)^\[%{TIMESTAMP_ISO8601:log_date}\]%{SPACE}?%{DATA:log_level}\:%{SPACE}?%{DATA:log_message}[Tt]race\:%{GREEDYDATA:log_stacktrace}" ] }
      match => { "message" => ["(?m)^\[%{TIMESTAMP_ISO8601:log_date}\]%{SPACE}?%{DATA:log_level}\:%{SPACE}?%{DATA:log_message}( {\"trace\"\:\"|[Tt]race\:)%{GREEDYDATA:log_stacktrace}" ] }
      match => { "message" => [ "(?m)^\[%{TIMESTAMP_ISO8601:log_date}\]%{SPACE}?%{DATA:log_level}\:%{SPACE}?%{GREEDYDATA:log_message}" ] }
    }
  }

  else if [type] == "exception.log" {
    grok {
      break_on_match => true
      match => { "message" => [ "(?m)%{GREEDYDATA:log_message}" ] }
#      match => { "message" => [ "(?m)^\[%{TIMESTAMP_ISO8601:log_date}\]%{SPACE}?%{DATA:log_level}\:%{SPACE}?%{DATA:log_message}[Tt]race\:%{GREEDYDATA:log_stacktrace}" ] }
#      match => { "message" => [ "(?m)^\[%{TIMESTAMP_ISO8601:log_date}\]%{SPACE}?%{DATA:log_level}\:%{SPACE}?%{GREEDYDATA:log_message}" ] }
    }
  }

  else if [type] == "stripe.log" {
    grok {
      break_on_match => true
      match => { "message" => [ "(?m)^\[%{TIMESTAMP_ISO8601:log_date}\]%{SPACE}?%{DATA:log_level}\:%{SPACE}?%{DATA:log_message}[Tt]race\:%{GREEDYDATA:log_stacktrace}" ] }
      match => { "message" => [ "(?m)^\[%{TIMESTAMP_ISO8601:log_date}\]%{SPACE}?%{DATA:log_level}\:%{SPACE}?%{GREEDYDATA:log_message}" ] }
    }
  }

  else if [type] == "shipping.log" {
    grok {
      break_on_match => true
      match => { "message" => [ "(?m)^\[%{TIMESTAMP_ISO8601:log_date}\]%{SPACE}?%{DATA:log_level}\:%{SPACE}?%{DATA:log_message}[Tt]race\:%{GREEDYDATA:log_stacktrace}" ] }
      match => { "message" => [ "(?m)^\[%{TIMESTAMP_ISO8601:log_date}\]%{SPACE}?%{DATA:log_level}\:%{SPACE}?%{GREEDYDATA:log_message}" ] }
    }
  }

  else if [type] == "tokenbase.log" {
    grok {
      break_on_match => true
      match => { "message" => [ "(?m)^\[%{TIMESTAMP_ISO8601:log_date}\]%{SPACE}?%{DATA:log_level}\:%{SPACE}?%{DATA:log_message}[Tt]race\:%{GREEDYDATA:log_stacktrace}" ] }
      match => { "message" => [ "(?m)^\[%{TIMESTAMP_ISO8601:log_date}\]%{SPACE}?%{DATA:log_level}\:%{SPACE}?%{GREEDYDATA:log_message}" ] }
    }
  }

  else if [type] == "connector.log" {
    grok {
      break_on_match => true
      match => { "message" => [ "(?m)^%{TIMESTAMP_ISO8601:log_date}%{SPACE}?%{DATA:log_level}\:%{SPACE}?%{DATA:log_message}[Tt]race\:%{GREEDYDATA:log_stacktrace}" ] }
      match => { "message" => [ "(?m)^%{TIMESTAMP_ISO8601:log_date}%{SPACE}?%{DATA:log_level}\:%{SPACE}%{GREEDYDATA:log_message}" ] }

    }
  }

  else if [type] == "shipperhq.log" {
    grok {
      break_on_match => true
      match => { "message" => [ "(?m)^\[%{TIMESTAMP_ISO8601:log_date}\]%{SPACE}?%{DATA:log_level}\:%{SPACE}?%{DATA:log_message}[Tt]race\:%{GREEDYDATA:log_stacktrace}" ] }
      match => { "message" => [ "(?m)^\[%{TIMESTAMP_ISO8601:log_date}\]%{SPACE}?%{DATA:log_level}\:%{SPACE}?%{GREEDYDATA:log_message}" ] }
    }
  }

  else if [type] == "cron.log" {
    grok {
      break_on_match => true
      match => { "message" => [ "(?m)^\[%{TIMESTAMP_ISO8601:log_date}\]%{SPACE}?%{DATA:log_level}\:%{SPACE}?%{DATA:log_message}[Tt]race\:%{GREEDYDATA:log_stacktrace}" ] }
      match => { "message" => [ "(?m)^\[%{TIMESTAMP_ISO8601:log_date}\]%{SPACE}?%{DATA:log_level}\:%{SPACE}?%{GREEDYDATA:log_message}" ] }
    }
  }

  else if [type] == "payment.log" {
    grok {
      break_on_match => true
      match => { "message" => [ "(?m)^\[%{TIMESTAMP_ISO8601:log_date}\]%{SPACE}?%{DATA:log_level}\:%{SPACE}?%{DATA:log_message}[Tt]race\:%{GREEDYDATA:log_stacktrace}" ] }
      match => { "message" => [ "(?m)^\[%{TIMESTAMP_ISO8601:log_date}\]%{SPACE}?%{DATA:log_level}\:%{SPACE}?%{GREEDYDATA:log_message}" ] }
    }
  }

  else if [type] == "fraud-detection.log" {
    grok {
      break_on_match => true
      match => { "message" => [ "(?m)^\[%{TIMESTAMP_ISO8601:log_date}\]%{SPACE}?%{DATA:log_level}\:%{SPACE}?%{DATA:log_message}[Tt]race\:%{GREEDYDATA:log_stacktrace}" ] }
      match => { "message" => [ "(?m)^\[%{TIMESTAMP_ISO8601:log_date}\]%{SPACE}?%{DATA:log_level}\:%{SPACE}?%{GREEDYDATA:log_message}" ] }
    }
  }

  else if [type] == "wordpress.log" {
    grok {
      break_on_match => true
      match => { "message" => [ "(?m)^\[%{TIMESTAMP_ISO8601:log_date}\]%{SPACE}?%{DATA:log_level}\:%{SPACE}?%{DATA:log_message}(\n[Ss]tack )?[Tt]race\:(\n)?%{GREEDYDATA:log_stacktrace}" ] }
      match => { "message" => [ "(?m)^\[%{TIMESTAMP_ISO8601:log_date}\]%{SPACE}?%{DATA:log_level}\:%{SPACE}?%{GREEDYDATA:log_message}" ] }
    }
  }

  else if [type] == "payment.log" {
    grok {
      break_on_match => true
      match => { "message" => [ "(?m)^\[%{TIMESTAMP_ISO8601:log_date}\]%{SPACE}%{DATA:log_level}\:%{SPACE}%{GREEDYDATA:log_message}" ] }
    }
  }

  else if [type] == "paywithamazon.log" {
    grok {
      break_on_match => true
      match => { "message" => [ "(?m)^\[%{TIMESTAMP_ISO8601:log_date}\]%{SPACE}%{DATA:log_level}\:%{SPACE}%{GREEDYDATA:log_message}" ] }
    }
  }

  else if [type] == "stripe_payments_webhooks.log" {
    grok {
      break_on_match => true
      match => { "message" => [ "(?m)^\[%{TIMESTAMP_ISO8601:log_date}\]%{SPACE}%{DATA:log_level}\:%{SPACE}%{GREEDYDATA:log_message}" ] }
    }
  }

  else if [type] == "afterpay.log" {
    grok {
      break_on_match => true
      match => { "message" => [ "(?m)^\[%{TIMESTAMP_ISO8601:log_date}\]%{SPACE}%{DATA:log_level}\:%{SPACE}%{GREEDYDATA:log_message}" ] }
    }
  }


### Magento logs end



### Nginx access/error log
  else if [type] == "nginx_access" {
    grok {
      break_on_match => true
      match => { "message" => [ "(?m)^%{IPORHOST:remote_addr} - %{USERNAME:remote_user} \[(%{HTTPDATE:time_local}|%{TIMESTAMP_ISO8601:time_local})\] \"%{WORD:method} %{DATA:request} HTTP/%{NUMBER:httpversion}\" %{INT:status} %{NUMBER:bytes_sent} \"%{DATA:http_referer}\" \"%{DATA:http_user_agent}\"" ] }
    }
    geoip {
      source => "remote_addr"
    }
  }

  else if [type] == "capezio_nginx_access" {
    grok {
      break_on_match => true
      match => { "message" => [ "(?m)^%{IPORHOST:remote_addr}(, %{IPORHOST:cdn_addr})? - - \[(%{HTTPDATE:time_local}|%{TIMESTAMP_ISO8601:time_local})\] \"%{WORD:method} %{DATA:request} HTTP/%{NUMBER:httpversion}\" %{INT:status} %{NUMBER:bytes_sent} \"%{DATA:http_referer}\" \"%{DATA:http_user_agent}\"" ] }
    }
    geoip {
      source => "remote_addr"
    }
  }

  else if [type] == "gws_nginx_access" {
    grok {
      break_on_match => true
      match => { "message" => [ "(?m)^%{IPORHOST:remote_addr}, %{IPORHOST:sucuri_ip}, %{IPORHOST:fastly_ip} - %{USERNAME:remote_user} \[(%{HTTPDATE:time_local}|%{TIMESTAMP_ISO8601:time_local})\] \"%{WORD:method} %{DATA:request} HTTP/%{NUMBER:httpversion}\" %{INT:status} %{NUMBER:bytes_sent} \"%{DATA:http_referer}\" \"%{DATA:http_user_agent}\"" ] }
    }
    geoip {
      source => "remote_addr"
    }
  }

#  else if [type] == "spiritedgifts_access" {
#    grok {
#      break_on_match => true
#      match => { "message" => [ "(?m)^%{IPORHOST:remote_addr} %{IPORHOST:remote_addr}, %{IPORHOST:remote_addr} %{WORD:hash} \[(%{HTTPDATE:time_local}|%{TIMESTAMP_ISO8601:time_local})\] \"%{WORD:method} %{DATA:request} HTTP/%{NUMBER:httpversion}\" %{INT:status} %{NUMBER:bytes_sent} \"%{DATA:http_referer}\" \"%{DATA:http_user_agent}\"" ] }
#    }
#    geoip {
#      source => "remote_addr"
#    }
#  }

###
  else if [type] == "nginx_error" {
    grok {
      break_on_match => true
      match => { "message" => [ "(?m)%{YEAR}[./]%{MONTHNUM}[./]%{MONTHDAY} %{TIME} \[%{LOGLEVEL:log_level}\] %{GREEDYDATA:log_message}" ] }
#      match => { "message" => [ "(?m)%{YEAR}[./]%{MONTHNUM}[./]%{MONTHDAY} %{TIME} \[%{LOGLEVEL:log_level}\] %{POSINT:pid}\#%{NUMBER:threadid}\: \*%{NUMBER:connectionid} %{GREEDYDATA:log_message}, client: %{IP:client}, server: %{GREEDYDATA:server}, request: \"(?:%{WORD:method} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion}))\"(, upstream: \"%{GREEDYDATA:upstream}\:\")?, host: \"%{GREEDYDATA:host}\"(, referrer: \"%{GREEDYDATA:refferer}\")" ] }
    }
    geoip {
      source => "remote_addr"
    }
  }

### Nginx access/error log end

### MySQL logs
  else if [type] == "mysql_slowlog" {
    grok {
      break_on_match => true
      match => { "message" => [ "(?m)^# User@Host: %{USER:mysql_slowlog_user}(\[[^\]]+\])? @ (%{HOSTNAME:mysql_slowlog_host})? \[(%{IP:mysql_slowlog_ip})?\](\s*Id:\s* %{NUMBER:mysql_slowlog_id})?\n# Query_time: %{NUMBER:mysql_slowlog_query_time_sec}\s* Lock_time: %{NUMBER:mysql_slowlog_lock_time_sec}\s* Rows_sent: %{NUMBER:mysql_slowlog_rows_sent}\s* Rows_examined: %{NUMBER:mysql_slowlog_rows_examined}\n(SET timestamp=%{NUMBER:mysql_slowlog_timestamp};\n)?%{GREEDYDATA:mysql_slowlog_query}" ] }
    }
  }
### MySQL logs end

  else {
### Anything else / non filtred
    grok {
      break_on_match => true
      match => { "message" => [ "(?m)%{GREEDYDATA:log_message}" ] }
    }
  }
  date {
    match => [ "log_date", "ISO8601" ]
  }

  mutate {
    remove_field => [ "message", "@version", "_id", "_index", "_score", "_type", "beat", "beat", "host_name", "input_type", "log_file_path", "log_flags", "offset", "prospector_type", "tags", "BASE10NUM" ]
    add_field => { "index" => "%{[application]}" }
  }

  if "_grokparsefailure" in [tags] {
    drop {}
  }
}